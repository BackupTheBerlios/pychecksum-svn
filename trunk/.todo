<!-- Automagically generated by the ToDo program on Sun Jun 19 12:22:00 2005 -->
<todo version="0.1.18">
    <note priority="veryhigh" time="1115745546" done="1116056530">
        implement sfv file checking/creation
    </note>
    <note priority="veryhigh" time="1115787051" done="1118558150">
        add documentation for the program using asciidoc
    </note>
    <note priority="high" time="1115745373" done="1116137216">
        show the check/creation progress in the title
    </note>
    <note priority="high" time="1115745994" done="1116393947">
        move the OptParse code from Main.py in pcs.py.
        <comment>
            used the 'Current' label to show the status
        </comment>
    </note>
    <note priority="high" time="1115786720" done="1116140904">
        count elapsed time from the program start
        <comment>
            Actually, count from the creation of the SumFile object.
        </comment>
    </note>
    <note priority="high" time="1116392124" done="1116393943">
        add a status bar and show on it the current checked file during creation/verification and the results when everything is done.
    </note>
    <note priority="high" time="1116651985" done="1118558221">
        register sfv files in Win32
    </note>
    <note priority="medium" time="1115745419" done="1116140110">
        add a label with the name of the currently checksumed file
    </note>
    <note priority="medium" time="1116134453" done="1116391950">
        when verifying, show the names from the sum file, not the absolute path. or add a flag for what to show.
    </note>
    <note priority="medium" time="1116392184" done="1116393125">
        add a verbose flag and show the status on the console only when this is set
    </note>
    <note priority="medium" time="1116392314" done="1119172859">
        update the windows registration code to register actions for sfv files, too.
        <comment>
            duplicate
        </comment>
    </note>
    <note priority="veryhigh" time="1115745895">
        add a setup.py
    </note>
    <note priority="veryhigh" time="1116438884">
        when generating a checksum, verify if it is empty and ignore the file in that case (but print some error - eventually show the bad label)
    </note>
    <note priority="veryhigh" time="1119172920">
        convert to uppercase all checksums read from a file
    </note>
    <note priority="high" time="1116397794">
        if started without parameters, show the help in a gtk window. show the OptParse help on console only if verbose.
    </note>
    <note priority="medium" time="1115746027">
        make the pcs able to start from any directory, even if it is symlinked (if this is possible).
    </note>
    <note priority="medium" time="1115786758">
        yield from the function that counts the number of files and their size and show the size computed so far in the label for size
    </note>
    <note priority="medium" time="1116134265">
        modify the code so that we can ignore dirs and files using regular expressions
    </note>
    <note priority="medium" time="1116137026">
        while generating the checksums, put a check on files that have been processed so far
    </note>
    <note priority="low" time="1115745338">
        set the order of checking identical with the order of files on cd/disk
    </note>
    <note priority="low" time="1115745786">
        remember window position and size
    </note>
    <note priority="low" time="1115745923">
        create an executable with py2exe for Win$$
    </note>
    <note priority="verylow" time="1118558391">
        Add queueing mechanism, that allows the user to add more than one file or directory for processing. The commands are stored in a queue directory, one file per user request and processed in a FIFO order (add possibility to change the order, too?).
    </note>
</todo>
